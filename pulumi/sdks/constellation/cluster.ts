// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'constellation:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * List of Subject Alternative Names (SANs) for the API server certificate. Usually, this will be the out-of-cluster
     * endpoint and the in-cluster endpoint, if existing.
     */
    declare public readonly apiServerCertSans: pulumi.Output<string[] | undefined>;
    /**
     * Attestation comprises the measurements and CVM specific parameters. The output of the constellation.getAttestation data
     * source provides sensible defaults.
     */
    declare public readonly attestation: pulumi.Output<outputs.ClusterAttestation>;
    /**
     * Azure-specific configuration.
     */
    declare public readonly azure: pulumi.Output<outputs.ClusterAzure | undefined>;
    /**
     * The client certificate of the cluster.
     */
    declare public /*out*/ readonly clientCertificate: pulumi.Output<string>;
    /**
     * The client key of the cluster.
     */
    declare public /*out*/ readonly clientKey: pulumi.Output<string>;
    /**
     * The cluster CA certificate of the cluster.
     */
    declare public /*out*/ readonly clusterCaCertificate: pulumi.Output<string>;
    /**
     * The cluster ID of the cluster.
     */
    declare public /*out*/ readonly clusterId: pulumi.Output<string>;
    /**
     * The version of Constellation's microservices used within the cluster.
     */
    declare public readonly constellationMicroserviceVersion: pulumi.Output<string>;
    /**
     * CSP (Cloud Service Provider) to use. (e.g. `azure`) See the [full list of
     * CSPs](https://docs.edgeless.systems/constellation/overview/clouds) that Constellation supports.
     */
    declare public readonly csp: pulumi.Output<string>;
    /**
     * Extra microservice settings.
     */
    declare public readonly extraMicroservices: pulumi.Output<outputs.ClusterExtraMicroservices | undefined>;
    /**
     * GCP-specific configuration.
     */
    declare public readonly gcp: pulumi.Output<outputs.ClusterGcp | undefined>;
    /**
     * The host of the cluster.
     */
    declare public /*out*/ readonly host: pulumi.Output<string>;
    /**
     * Constellation OS Image to use on the nodes.
     */
    declare public readonly image: pulumi.Output<outputs.ClusterImage>;
    /**
     * The endpoint of the cluster. When not set, the out-of-cluster endpoint is used.
     */
    declare public readonly inClusterEndpoint: pulumi.Output<string | undefined>;
    /**
     * Secret used for initialization of the cluster.
     */
    declare public readonly initSecret: pulumi.Output<string>;
    /**
     * The kubeconfig (file) of the cluster.
     */
    declare public /*out*/ readonly kubeconfig: pulumi.Output<string>;
    /**
     * The Kubernetes version to use for the cluster. The supported versions are [v1.30.14 v1.31.12 v1.32.8].
     */
    declare public readonly kubernetesVersion: pulumi.Output<string>;
    /**
     * Constellation license ID. When not set, the community license is used.
     */
    declare public readonly licenseId: pulumi.Output<string | undefined>;
    /**
     * Hex-encoded 32-byte master secret for the cluster.
     */
    declare public readonly masterSecret: pulumi.Output<string>;
    /**
     * Hex-encoded 32-byte master secret salt for the cluster.
     */
    declare public readonly masterSecretSalt: pulumi.Output<string>;
    /**
     * Hex-encoded 32-byte measurement salt for the cluster.
     */
    declare public readonly measurementSalt: pulumi.Output<string>;
    /**
     * Name used in the cluster's named resources / cluster name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Configuration for the cluster's network.
     */
    declare public readonly networkConfig: pulumi.Output<outputs.ClusterNetworkConfig>;
    /**
     * OpenStack-specific configuration.
     */
    declare public readonly openstack: pulumi.Output<outputs.ClusterOpenstack | undefined>;
    /**
     * The endpoint of the cluster. Typically, this is the public IP of a loadbalancer.
     */
    declare public readonly outOfClusterEndpoint: pulumi.Output<string>;
    /**
     * The owner ID of the cluster.
     */
    declare public /*out*/ readonly ownerId: pulumi.Output<string>;
    /**
     * The UID of the cluster.
     */
    declare public readonly uid: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["apiServerCertSans"] = state?.apiServerCertSans;
            resourceInputs["attestation"] = state?.attestation;
            resourceInputs["azure"] = state?.azure;
            resourceInputs["clientCertificate"] = state?.clientCertificate;
            resourceInputs["clientKey"] = state?.clientKey;
            resourceInputs["clusterCaCertificate"] = state?.clusterCaCertificate;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["constellationMicroserviceVersion"] = state?.constellationMicroserviceVersion;
            resourceInputs["csp"] = state?.csp;
            resourceInputs["extraMicroservices"] = state?.extraMicroservices;
            resourceInputs["gcp"] = state?.gcp;
            resourceInputs["host"] = state?.host;
            resourceInputs["image"] = state?.image;
            resourceInputs["inClusterEndpoint"] = state?.inClusterEndpoint;
            resourceInputs["initSecret"] = state?.initSecret;
            resourceInputs["kubeconfig"] = state?.kubeconfig;
            resourceInputs["kubernetesVersion"] = state?.kubernetesVersion;
            resourceInputs["licenseId"] = state?.licenseId;
            resourceInputs["masterSecret"] = state?.masterSecret;
            resourceInputs["masterSecretSalt"] = state?.masterSecretSalt;
            resourceInputs["measurementSalt"] = state?.measurementSalt;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkConfig"] = state?.networkConfig;
            resourceInputs["openstack"] = state?.openstack;
            resourceInputs["outOfClusterEndpoint"] = state?.outOfClusterEndpoint;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["uid"] = state?.uid;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.attestation === undefined && !opts.urn) {
                throw new Error("Missing required property 'attestation'");
            }
            if (args?.constellationMicroserviceVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'constellationMicroserviceVersion'");
            }
            if (args?.csp === undefined && !opts.urn) {
                throw new Error("Missing required property 'csp'");
            }
            if (args?.image === undefined && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if (args?.initSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'initSecret'");
            }
            if (args?.kubernetesVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'kubernetesVersion'");
            }
            if (args?.masterSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterSecret'");
            }
            if (args?.masterSecretSalt === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterSecretSalt'");
            }
            if (args?.measurementSalt === undefined && !opts.urn) {
                throw new Error("Missing required property 'measurementSalt'");
            }
            if (args?.networkConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkConfig'");
            }
            if (args?.outOfClusterEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'outOfClusterEndpoint'");
            }
            if (args?.uid === undefined && !opts.urn) {
                throw new Error("Missing required property 'uid'");
            }
            resourceInputs["apiServerCertSans"] = args?.apiServerCertSans;
            resourceInputs["attestation"] = args?.attestation;
            resourceInputs["azure"] = args?.azure;
            resourceInputs["constellationMicroserviceVersion"] = args?.constellationMicroserviceVersion;
            resourceInputs["csp"] = args?.csp;
            resourceInputs["extraMicroservices"] = args?.extraMicroservices;
            resourceInputs["gcp"] = args?.gcp;
            resourceInputs["image"] = args?.image;
            resourceInputs["inClusterEndpoint"] = args?.inClusterEndpoint;
            resourceInputs["initSecret"] = args?.initSecret;
            resourceInputs["kubernetesVersion"] = args?.kubernetesVersion;
            resourceInputs["licenseId"] = args?.licenseId;
            resourceInputs["masterSecret"] = args?.masterSecret;
            resourceInputs["masterSecretSalt"] = args?.masterSecretSalt;
            resourceInputs["measurementSalt"] = args?.measurementSalt;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkConfig"] = args?.networkConfig;
            resourceInputs["openstack"] = args?.openstack;
            resourceInputs["outOfClusterEndpoint"] = args?.outOfClusterEndpoint;
            resourceInputs["uid"] = args?.uid;
            resourceInputs["clientCertificate"] = undefined /*out*/;
            resourceInputs["clientKey"] = undefined /*out*/;
            resourceInputs["clusterCaCertificate"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientKey", "kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * List of Subject Alternative Names (SANs) for the API server certificate. Usually, this will be the out-of-cluster
     * endpoint and the in-cluster endpoint, if existing.
     */
    apiServerCertSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Attestation comprises the measurements and CVM specific parameters. The output of the constellation.getAttestation data
     * source provides sensible defaults.
     */
    attestation?: pulumi.Input<inputs.ClusterAttestation>;
    /**
     * Azure-specific configuration.
     */
    azure?: pulumi.Input<inputs.ClusterAzure>;
    /**
     * The client certificate of the cluster.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The client key of the cluster.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The cluster CA certificate of the cluster.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    /**
     * The cluster ID of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The version of Constellation's microservices used within the cluster.
     */
    constellationMicroserviceVersion?: pulumi.Input<string>;
    /**
     * CSP (Cloud Service Provider) to use. (e.g. `azure`) See the [full list of
     * CSPs](https://docs.edgeless.systems/constellation/overview/clouds) that Constellation supports.
     */
    csp?: pulumi.Input<string>;
    /**
     * Extra microservice settings.
     */
    extraMicroservices?: pulumi.Input<inputs.ClusterExtraMicroservices>;
    /**
     * GCP-specific configuration.
     */
    gcp?: pulumi.Input<inputs.ClusterGcp>;
    /**
     * The host of the cluster.
     */
    host?: pulumi.Input<string>;
    /**
     * Constellation OS Image to use on the nodes.
     */
    image?: pulumi.Input<inputs.ClusterImage>;
    /**
     * The endpoint of the cluster. When not set, the out-of-cluster endpoint is used.
     */
    inClusterEndpoint?: pulumi.Input<string>;
    /**
     * Secret used for initialization of the cluster.
     */
    initSecret?: pulumi.Input<string>;
    /**
     * The kubeconfig (file) of the cluster.
     */
    kubeconfig?: pulumi.Input<string>;
    /**
     * The Kubernetes version to use for the cluster. The supported versions are [v1.30.14 v1.31.12 v1.32.8].
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Constellation license ID. When not set, the community license is used.
     */
    licenseId?: pulumi.Input<string>;
    /**
     * Hex-encoded 32-byte master secret for the cluster.
     */
    masterSecret?: pulumi.Input<string>;
    /**
     * Hex-encoded 32-byte master secret salt for the cluster.
     */
    masterSecretSalt?: pulumi.Input<string>;
    /**
     * Hex-encoded 32-byte measurement salt for the cluster.
     */
    measurementSalt?: pulumi.Input<string>;
    /**
     * Name used in the cluster's named resources / cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for the cluster's network.
     */
    networkConfig?: pulumi.Input<inputs.ClusterNetworkConfig>;
    /**
     * OpenStack-specific configuration.
     */
    openstack?: pulumi.Input<inputs.ClusterOpenstack>;
    /**
     * The endpoint of the cluster. Typically, this is the public IP of a loadbalancer.
     */
    outOfClusterEndpoint?: pulumi.Input<string>;
    /**
     * The owner ID of the cluster.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The UID of the cluster.
     */
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * List of Subject Alternative Names (SANs) for the API server certificate. Usually, this will be the out-of-cluster
     * endpoint and the in-cluster endpoint, if existing.
     */
    apiServerCertSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Attestation comprises the measurements and CVM specific parameters. The output of the constellation.getAttestation data
     * source provides sensible defaults.
     */
    attestation: pulumi.Input<inputs.ClusterAttestation>;
    /**
     * Azure-specific configuration.
     */
    azure?: pulumi.Input<inputs.ClusterAzure>;
    /**
     * The version of Constellation's microservices used within the cluster.
     */
    constellationMicroserviceVersion: pulumi.Input<string>;
    /**
     * CSP (Cloud Service Provider) to use. (e.g. `azure`) See the [full list of
     * CSPs](https://docs.edgeless.systems/constellation/overview/clouds) that Constellation supports.
     */
    csp: pulumi.Input<string>;
    /**
     * Extra microservice settings.
     */
    extraMicroservices?: pulumi.Input<inputs.ClusterExtraMicroservices>;
    /**
     * GCP-specific configuration.
     */
    gcp?: pulumi.Input<inputs.ClusterGcp>;
    /**
     * Constellation OS Image to use on the nodes.
     */
    image: pulumi.Input<inputs.ClusterImage>;
    /**
     * The endpoint of the cluster. When not set, the out-of-cluster endpoint is used.
     */
    inClusterEndpoint?: pulumi.Input<string>;
    /**
     * Secret used for initialization of the cluster.
     */
    initSecret: pulumi.Input<string>;
    /**
     * The Kubernetes version to use for the cluster. The supported versions are [v1.30.14 v1.31.12 v1.32.8].
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * Constellation license ID. When not set, the community license is used.
     */
    licenseId?: pulumi.Input<string>;
    /**
     * Hex-encoded 32-byte master secret for the cluster.
     */
    masterSecret: pulumi.Input<string>;
    /**
     * Hex-encoded 32-byte master secret salt for the cluster.
     */
    masterSecretSalt: pulumi.Input<string>;
    /**
     * Hex-encoded 32-byte measurement salt for the cluster.
     */
    measurementSalt: pulumi.Input<string>;
    /**
     * Name used in the cluster's named resources / cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for the cluster's network.
     */
    networkConfig: pulumi.Input<inputs.ClusterNetworkConfig>;
    /**
     * OpenStack-specific configuration.
     */
    openstack?: pulumi.Input<inputs.ClusterOpenstack>;
    /**
     * The endpoint of the cluster. Typically, this is the public IP of a loadbalancer.
     */
    outOfClusterEndpoint: pulumi.Input<string>;
    /**
     * The UID of the cluster.
     */
    uid: pulumi.Input<string>;
}
