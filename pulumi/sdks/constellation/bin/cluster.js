"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiServerCertSans"] = state?.apiServerCertSans;
            resourceInputs["attestation"] = state?.attestation;
            resourceInputs["azure"] = state?.azure;
            resourceInputs["clientCertificate"] = state?.clientCertificate;
            resourceInputs["clientKey"] = state?.clientKey;
            resourceInputs["clusterCaCertificate"] = state?.clusterCaCertificate;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["constellationMicroserviceVersion"] = state?.constellationMicroserviceVersion;
            resourceInputs["csp"] = state?.csp;
            resourceInputs["extraMicroservices"] = state?.extraMicroservices;
            resourceInputs["gcp"] = state?.gcp;
            resourceInputs["host"] = state?.host;
            resourceInputs["image"] = state?.image;
            resourceInputs["inClusterEndpoint"] = state?.inClusterEndpoint;
            resourceInputs["initSecret"] = state?.initSecret;
            resourceInputs["kubeconfig"] = state?.kubeconfig;
            resourceInputs["kubernetesVersion"] = state?.kubernetesVersion;
            resourceInputs["licenseId"] = state?.licenseId;
            resourceInputs["masterSecret"] = state?.masterSecret;
            resourceInputs["masterSecretSalt"] = state?.masterSecretSalt;
            resourceInputs["measurementSalt"] = state?.measurementSalt;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkConfig"] = state?.networkConfig;
            resourceInputs["openstack"] = state?.openstack;
            resourceInputs["outOfClusterEndpoint"] = state?.outOfClusterEndpoint;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["uid"] = state?.uid;
        }
        else {
            const args = argsOrState;
            if (args?.attestation === undefined && !opts.urn) {
                throw new Error("Missing required property 'attestation'");
            }
            if (args?.constellationMicroserviceVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'constellationMicroserviceVersion'");
            }
            if (args?.csp === undefined && !opts.urn) {
                throw new Error("Missing required property 'csp'");
            }
            if (args?.image === undefined && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if (args?.initSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'initSecret'");
            }
            if (args?.kubernetesVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'kubernetesVersion'");
            }
            if (args?.masterSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterSecret'");
            }
            if (args?.masterSecretSalt === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterSecretSalt'");
            }
            if (args?.measurementSalt === undefined && !opts.urn) {
                throw new Error("Missing required property 'measurementSalt'");
            }
            if (args?.networkConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkConfig'");
            }
            if (args?.outOfClusterEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'outOfClusterEndpoint'");
            }
            if (args?.uid === undefined && !opts.urn) {
                throw new Error("Missing required property 'uid'");
            }
            resourceInputs["apiServerCertSans"] = args?.apiServerCertSans;
            resourceInputs["attestation"] = args?.attestation;
            resourceInputs["azure"] = args?.azure;
            resourceInputs["constellationMicroserviceVersion"] = args?.constellationMicroserviceVersion;
            resourceInputs["csp"] = args?.csp;
            resourceInputs["extraMicroservices"] = args?.extraMicroservices;
            resourceInputs["gcp"] = args?.gcp;
            resourceInputs["image"] = args?.image;
            resourceInputs["inClusterEndpoint"] = args?.inClusterEndpoint;
            resourceInputs["initSecret"] = args?.initSecret;
            resourceInputs["kubernetesVersion"] = args?.kubernetesVersion;
            resourceInputs["licenseId"] = args?.licenseId;
            resourceInputs["masterSecret"] = args?.masterSecret;
            resourceInputs["masterSecretSalt"] = args?.masterSecretSalt;
            resourceInputs["measurementSalt"] = args?.measurementSalt;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkConfig"] = args?.networkConfig;
            resourceInputs["openstack"] = args?.openstack;
            resourceInputs["outOfClusterEndpoint"] = args?.outOfClusterEndpoint;
            resourceInputs["uid"] = args?.uid;
            resourceInputs["clientCertificate"] = undefined /*out*/;
            resourceInputs["clientKey"] = undefined /*out*/;
            resourceInputs["clusterCaCertificate"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientKey", "kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'constellation:index/cluster:Cluster';
//# sourceMappingURL=cluster.js.map