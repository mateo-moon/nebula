"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.Provider = exports.getImageOutput = exports.getImage = exports.getAttestationOutput = exports.getAttestation = exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.getAttestation = null;
exports.getAttestationOutput = null;
utilities.lazyLoad(exports, ["getAttestation", "getAttestationOutput"], () => require("./getAttestation"));
exports.getImage = null;
exports.getImageOutput = null;
utilities.lazyLoad(exports, ["getImage", "getImageOutput"], () => require("./getImage"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
// Export sub-modules:
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "constellation:index/cluster:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("constellation", "index/cluster", _module);
pulumi.runtime.registerResourcePackage("constellation", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:constellation") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map