// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterAttestation {
    amdRootKey: string;
    azureFirmwareSignerConfig?: outputs.ClusterAttestationAzureFirmwareSignerConfig;
    bootloaderVersion: number;
    measurements: {[key: string]: outputs.ClusterAttestationMeasurements};
    microcodeVersion: number;
    snpVersion: number;
    tdx?: outputs.ClusterAttestationTdx;
    teeVersion: number;
    /**
     * Attestation variant the image should work with. Can be one of:
     *   * `aws-sev-snp`
     *   * `aws-nitro-tpm`
     *   * `azure-sev-snp`
     *   * `azure-tdx`
     *   * `gcp-sev-snp`
     *   * `gcp-sev-es`
     *   * `qemu-vtpm`
     */
    variant: string;
}

export interface ClusterAttestationAzureFirmwareSignerConfig {
    acceptedKeyDigests?: string[];
    enforcementPolicy?: string;
    maaUrl?: string;
}

export interface ClusterAttestationMeasurements {
    expected: string;
    warnOnly: boolean;
}

export interface ClusterAttestationTdx {
    intelRootKey?: string;
    mrSeam?: string;
    pceSvn?: number;
    qeSvn?: number;
    qeVendorId?: string;
    teeTcbSvn?: string;
    xfam?: string;
}

export interface ClusterAzure {
    /**
     * Name of the Azure load balancer used by the cluster.
     */
    loadBalancerName: string;
    /**
     * Azure Location of the cluster.
     */
    location: string;
    /**
     * Name of the Azure network security group used for the cluster.
     */
    networkSecurityGroupName: string;
    /**
     * Name of the Azure resource group the cluster resides in.
     */
    resourceGroup: string;
    /**
     * ID of the Azure subscription the cluster resides in.
     */
    subscriptionId: string;
    /**
     * Tenant ID of the Azure account.
     */
    tenantId: string;
    /**
     * Client ID of the User assigned managed identity (UAMI) used within the cluster.
     */
    uamiClientId: string;
    /**
     * Resource ID of the User assigned managed identity (UAMI) used within the cluster.
     */
    uamiResourceId: string;
}

export interface ClusterExtraMicroservices {
    /**
     * Enable Constellation's [encrypted CSI driver](https://docs.edgeless.systems/constellation/workflows/storage).
     */
    csiDriver: boolean;
}

export interface ClusterGcp {
    /**
     * ID of the GCP project the cluster resides in.
     */
    projectId: string;
    /**
     * Base64-encoded private key JSON object of the service account used within the cluster.
     */
    serviceAccountKey: string;
}

export interface ClusterImage {
    /**
     * Whether a marketplace image should be used.
     */
    marketplaceImage?: boolean;
    /**
     * CSP-specific unique reference to the image. The format differs per CSP.
     */
    reference: string;
    /**
     * CSP-agnostic short path to the image. The format is `vX.Y.Z` for release images and `ref/$GIT_REF/stream/$STREAM/$SEMANTIC_VERSION` for pre-release images.
     * - `$GIT_REF` is the git reference (i.e. branch name) the image was built on, e.g. `main`.
     * - `$STREAM` is the stream the image was built on, e.g. `nightly`.
     * - `$SEMANTIC_VERSION` is the semantic version of the image, e.g. `vX.Y.Z` or `vX.Y.Z-pre...`.
     */
    shortPath: string;
    /**
     * Semantic version of the image.
     */
    version: string;
}

export interface ClusterNetworkConfig {
    /**
     * CIDR range of the cluster's node network.
     */
    ipCidrNode: string;
    /**
     * CIDR range of the cluster's pod network. Only required for clusters running on GCP.
     */
    ipCidrPod?: string;
    /**
     * CIDR range of the cluster's service network.
     */
    ipCidrService: string;
}

export interface ClusterOpenstack {
    /**
     * Name of the cloud in the clouds.yaml file.
     */
    cloud: string;
    /**
     * Path to the clouds.yaml file.
     */
    cloudsYamlPath?: string;
    /**
     * Whether to deploy a YAWOL load balancer.
     */
    deployYawolLoadBalancer?: boolean;
    /**
     * Floating IP pool to use for the VMs.
     */
    floatingIpPoolId: string;
    /**
     * OpenStack network ID to use for the VMs.
     */
    networkId: string;
    /**
     * OpenStack subnet ID to use for the VMs.
     */
    subnetId: string;
    /**
     * OpenStack flavor used by the yawollet.
     */
    yawolFlavorId?: string;
    /**
     * OpenStack OS image used by the yawollet.
     */
    yawolImageId?: string;
}

export interface GetAttestationAttestation {
    amdRootKey: string;
    azureFirmwareSignerConfig: outputs.GetAttestationAttestationAzureFirmwareSignerConfig;
    bootloaderVersion: number;
    measurements: {[key: string]: outputs.GetAttestationAttestationMeasurements};
    microcodeVersion: number;
    snpVersion: number;
    tdx: outputs.GetAttestationAttestationTdx;
    teeVersion: number;
    /**
     * Attestation variant the image should work with. Can be one of:
     *   * `aws-sev-snp`
     *   * `aws-nitro-tpm`
     *   * `azure-sev-snp`
     *   * `azure-tdx`
     *   * `gcp-sev-snp`
     *   * `gcp-sev-es`
     *   * `qemu-vtpm`
     */
    variant: string;
}

export interface GetAttestationAttestationAzureFirmwareSignerConfig {
    acceptedKeyDigests: string[];
    enforcementPolicy: string;
    maaUrl: string;
}

export interface GetAttestationAttestationMeasurements {
    expected: string;
    warnOnly: boolean;
}

export interface GetAttestationAttestationTdx {
    intelRootKey: string;
    mrSeam: string;
    pceSvn: number;
    qeSvn: number;
    qeVendorId: string;
    teeTcbSvn: string;
    xfam: string;
}

export interface GetAttestationImage {
    /**
     * Whether a marketplace image should be used.
     */
    marketplaceImage?: boolean;
    /**
     * CSP-specific unique reference to the image. The format differs per CSP.
     */
    reference: string;
    /**
     * CSP-agnostic short path to the image. The format is `vX.Y.Z` for release images and `ref/$GIT_REF/stream/$STREAM/$SEMANTIC_VERSION` for pre-release images.
     * - `$GIT_REF` is the git reference (i.e. branch name) the image was built on, e.g. `main`.
     * - `$STREAM` is the stream the image was built on, e.g. `nightly`.
     * - `$SEMANTIC_VERSION` is the semantic version of the image, e.g. `vX.Y.Z` or `vX.Y.Z-pre...`.
     */
    shortPath: string;
    /**
     * Semantic version of the image.
     */
    version: string;
}

export interface GetImageImage {
    /**
     * Whether a marketplace image should be used.
     */
    marketplaceImage?: boolean;
    /**
     * CSP-specific unique reference to the image. The format differs per CSP.
     */
    reference: string;
    /**
     * CSP-agnostic short path to the image. The format is `vX.Y.Z` for release images and `ref/$GIT_REF/stream/$STREAM/$SEMANTIC_VERSION` for pre-release images.
     * - `$GIT_REF` is the git reference (i.e. branch name) the image was built on, e.g. `main`.
     * - `$STREAM` is the stream the image was built on, e.g. `nightly`.
     * - `$SEMANTIC_VERSION` is the semantic version of the image, e.g. `vX.Y.Z` or `vX.Y.Z-pre...`.
     */
    shortPath: string;
    /**
     * Semantic version of the image.
     */
    version: string;
}

