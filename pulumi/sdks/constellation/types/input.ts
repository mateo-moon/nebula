// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterAttestation {
    amdRootKey: pulumi.Input<string>;
    azureFirmwareSignerConfig?: pulumi.Input<inputs.ClusterAttestationAzureFirmwareSignerConfig>;
    bootloaderVersion: pulumi.Input<number>;
    measurements: pulumi.Input<{[key: string]: pulumi.Input<inputs.ClusterAttestationMeasurements>}>;
    microcodeVersion: pulumi.Input<number>;
    snpVersion: pulumi.Input<number>;
    tdx?: pulumi.Input<inputs.ClusterAttestationTdx>;
    teeVersion: pulumi.Input<number>;
    /**
     * Attestation variant the image should work with. Can be one of:
     *   * `aws-sev-snp`
     *   * `aws-nitro-tpm`
     *   * `azure-sev-snp`
     *   * `azure-tdx`
     *   * `gcp-sev-snp`
     *   * `gcp-sev-es`
     *   * `qemu-vtpm`
     */
    variant: pulumi.Input<string>;
}

export interface ClusterAttestationAzureFirmwareSignerConfig {
    acceptedKeyDigests?: pulumi.Input<pulumi.Input<string>[]>;
    enforcementPolicy?: pulumi.Input<string>;
    maaUrl?: pulumi.Input<string>;
}

export interface ClusterAttestationMeasurements {
    expected: pulumi.Input<string>;
    warnOnly: pulumi.Input<boolean>;
}

export interface ClusterAttestationTdx {
    intelRootKey?: pulumi.Input<string>;
    mrSeam?: pulumi.Input<string>;
    pceSvn?: pulumi.Input<number>;
    qeSvn?: pulumi.Input<number>;
    qeVendorId?: pulumi.Input<string>;
    teeTcbSvn?: pulumi.Input<string>;
    xfam?: pulumi.Input<string>;
}

export interface ClusterAzure {
    /**
     * Name of the Azure load balancer used by the cluster.
     */
    loadBalancerName: pulumi.Input<string>;
    /**
     * Azure Location of the cluster.
     */
    location: pulumi.Input<string>;
    /**
     * Name of the Azure network security group used for the cluster.
     */
    networkSecurityGroupName: pulumi.Input<string>;
    /**
     * Name of the Azure resource group the cluster resides in.
     */
    resourceGroup: pulumi.Input<string>;
    /**
     * ID of the Azure subscription the cluster resides in.
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * Tenant ID of the Azure account.
     */
    tenantId: pulumi.Input<string>;
    /**
     * Client ID of the User assigned managed identity (UAMI) used within the cluster.
     */
    uamiClientId: pulumi.Input<string>;
    /**
     * Resource ID of the User assigned managed identity (UAMI) used within the cluster.
     */
    uamiResourceId: pulumi.Input<string>;
}

export interface ClusterExtraMicroservices {
    /**
     * Enable Constellation's [encrypted CSI driver](https://docs.edgeless.systems/constellation/workflows/storage).
     */
    csiDriver: pulumi.Input<boolean>;
}

export interface ClusterGcp {
    /**
     * ID of the GCP project the cluster resides in.
     */
    projectId: pulumi.Input<string>;
    /**
     * Base64-encoded private key JSON object of the service account used within the cluster.
     */
    serviceAccountKey: pulumi.Input<string>;
}

export interface ClusterImage {
    /**
     * Whether a marketplace image should be used.
     */
    marketplaceImage?: pulumi.Input<boolean>;
    /**
     * CSP-specific unique reference to the image. The format differs per CSP.
     */
    reference: pulumi.Input<string>;
    /**
     * CSP-agnostic short path to the image. The format is `vX.Y.Z` for release images and `ref/$GIT_REF/stream/$STREAM/$SEMANTIC_VERSION` for pre-release images.
     * - `$GIT_REF` is the git reference (i.e. branch name) the image was built on, e.g. `main`.
     * - `$STREAM` is the stream the image was built on, e.g. `nightly`.
     * - `$SEMANTIC_VERSION` is the semantic version of the image, e.g. `vX.Y.Z` or `vX.Y.Z-pre...`.
     */
    shortPath: pulumi.Input<string>;
    /**
     * Semantic version of the image.
     */
    version: pulumi.Input<string>;
}

export interface ClusterNetworkConfig {
    /**
     * CIDR range of the cluster's node network.
     */
    ipCidrNode: pulumi.Input<string>;
    /**
     * CIDR range of the cluster's pod network. Only required for clusters running on GCP.
     */
    ipCidrPod?: pulumi.Input<string>;
    /**
     * CIDR range of the cluster's service network.
     */
    ipCidrService: pulumi.Input<string>;
}

export interface ClusterOpenstack {
    /**
     * Name of the cloud in the clouds.yaml file.
     */
    cloud: pulumi.Input<string>;
    /**
     * Path to the clouds.yaml file.
     */
    cloudsYamlPath?: pulumi.Input<string>;
    /**
     * Whether to deploy a YAWOL load balancer.
     */
    deployYawolLoadBalancer?: pulumi.Input<boolean>;
    /**
     * Floating IP pool to use for the VMs.
     */
    floatingIpPoolId: pulumi.Input<string>;
    /**
     * OpenStack network ID to use for the VMs.
     */
    networkId: pulumi.Input<string>;
    /**
     * OpenStack subnet ID to use for the VMs.
     */
    subnetId: pulumi.Input<string>;
    /**
     * OpenStack flavor used by the yawollet.
     */
    yawolFlavorId?: pulumi.Input<string>;
    /**
     * OpenStack OS image used by the yawollet.
     */
    yawolImageId?: pulumi.Input<string>;
}

export interface GetAttestationImage {
    /**
     * Whether a marketplace image should be used.
     */
    marketplaceImage?: boolean;
    /**
     * CSP-specific unique reference to the image. The format differs per CSP.
     */
    reference: string;
    /**
     * CSP-agnostic short path to the image. The format is `vX.Y.Z` for release images and `ref/$GIT_REF/stream/$STREAM/$SEMANTIC_VERSION` for pre-release images.
     * - `$GIT_REF` is the git reference (i.e. branch name) the image was built on, e.g. `main`.
     * - `$STREAM` is the stream the image was built on, e.g. `nightly`.
     * - `$SEMANTIC_VERSION` is the semantic version of the image, e.g. `vX.Y.Z` or `vX.Y.Z-pre...`.
     */
    shortPath: string;
    /**
     * Semantic version of the image.
     */
    version: string;
}

export interface GetAttestationImageArgs {
    /**
     * Whether a marketplace image should be used.
     */
    marketplaceImage?: pulumi.Input<boolean>;
    /**
     * CSP-specific unique reference to the image. The format differs per CSP.
     */
    reference: pulumi.Input<string>;
    /**
     * CSP-agnostic short path to the image. The format is `vX.Y.Z` for release images and `ref/$GIT_REF/stream/$STREAM/$SEMANTIC_VERSION` for pre-release images.
     * - `$GIT_REF` is the git reference (i.e. branch name) the image was built on, e.g. `main`.
     * - `$STREAM` is the stream the image was built on, e.g. `nightly`.
     * - `$SEMANTIC_VERSION` is the semantic version of the image, e.g. `vX.Y.Z` or `vX.Y.Z-pre...`.
     */
    shortPath: pulumi.Input<string>;
    /**
     * Semantic version of the image.
     */
    version: pulumi.Input<string>;
}

