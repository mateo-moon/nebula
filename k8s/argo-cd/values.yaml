argo-cd:
  extraObjects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-oidc
      namespace: argo-cd
      labels:
        app.kubernetes.io/part-of: argocd
    type: Opaque
    stringData:
      # The OIDC secrets (base64 enc) will be loaded into argocd-cm later!
      # See: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
      clientID: ref+sops://../../.secrets/secrets.yaml#github/oidc/client_id
      clientSecret: ref+sops://../../.secrets/secrets.yaml#github/oidc/client_secret
  global:
    logging:
      level: debug
    additionalLabels:
      team: devops
    securityContext:
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
  controller:
    replicas: 1
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        memory: 1Gi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      rules:
        enabled: true
        spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 12h
          labels:
            severity: info
          annotations:
            summary: "[ArgoCD] No reported applications"
            description: >
              ArgoCD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: info
          annotations:
            summary: "[{{ $labels.name }}] Application not synchronized"
            description: >
              The application [{{ $labels.name }} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.
  dex:
    resources:
      requests:
        cpu: 5m
        memory: 32Mi
      limits:
        memory: 128Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  redis:
    resources:
      requests:
        cpu: 5m
        memory: 64Mi
      limits:
        memory: 256Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  applicationSet:
    resources:
      requests:
        memory: 32Mi
        cpu: 0.1
      limits:
        memory: 128Mi
  notifications:
    resources:
      requests:
        cpu: 5m
        memory: 64Mi
      limits:
        memory: 128Mi
  server:
    resources:
      requests:
        cpu: 0.1
        memory: 64Mi
      limits:
        memory: 512Mi
    replicas: 1
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  repoServer:
    replicas: 1
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    env:
    - name: ARGOCD_EXEC_TIMEOUT
      value: 5m
    - name: HELM_PLUGINS
      value: /gitops-tools/helm-plugins/
    - name: HELM_SECRETS_CURL_PATH
      value: /gitops-tools/curl
    - name: HELM_SECRETS_SOPS_PATH
      value: /gitops-tools/sops
    - name: HELM_SECRETS_VALS_PATH
      value: /gitops-tools/vals
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /gitops-tools/kubectl
    - name: HELM_SECRETS_BACKEND
      value: vals
    - name: HELM_SECRETS_ALLOWED_BACKENDS
      value: vals
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "true"
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm
    volumes:
    - name: gitops-tools
      emptyDir: {}
    volumeMounts:
    - mountPath: /gitops-tools
      name: gitops-tools
    - mountPath: /usr/local/sbin/helm
      subPath: helm
      name: gitops-tools
    initContainers:
    - name: download-tools
      image: alpine:latest
      imagePullPolicy: IfNotPresent
      command: [sh, -ec]
      env:
        - name: HELM_SECRETS_VERSION
          value: "4.6.2"
        - name: KUBECTL_VERSION
          value: "1.30.2"
        - name: VALS_VERSION
          value: "0.37.8"
        - name: SOPS_VERSION
          value: "3.9.0"
      args:
        - |-
          mkdir -p /gitops-tools/helm-plugins

          GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/')
          wget -qO /gitops-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-${GO_ARCH}

          GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/') && \
          wget -qO /gitops-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${GO_ARCH}/kubectl
          wget -qO /gitops-tools/sops https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.${GO_ARCH}
          wget -qO- https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_${GO_ARCH}.tar.gz | tar zxv -C /gitops-tools vals
          wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /gitops-tools/helm-plugins -xzf-

          chmod +x /gitops-tools/*
          cp /gitops-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /gitops-tools/helm
      volumeMounts:
        - mountPath: /gitops-tools
          name: gitops-tools
      resources:
        limits:
          memory: 64M
        requests:
          cpu: 5m
          memory: 16M
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - all
    serviceAccount:
      create: true
      name: "argocd-repo-server"
      automountServiceAccountToken: true
      annotations:
        eks.amazonaws.com/role-arn: ""
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 50m
        memory: 512Mi
  configs:
    credentialTemplates:
      ssh-creds:
       url: ""
       sshPrivateKey: ref+sops://../../.secrets/secrets.yaml#github/bot_creds/ssh_private_key
    repositories:
      infra:
        url: ""
    cm:
      dex.config: |
        connectors:
        - type: github
          id: github
          name: Github
          config:
            clientID: $argocd-oidc:clientID
            clientSecret: $argocd-oidc:clientSecret
            orgs:
            - name: 
      exec.enabled: "true"
      server.rbac.log.enforce.enable: "true"
      # disable admin login
      # admin.enabled: "false"
      # https://github.com/jkroepke/helm-secrets/wiki/ArgoCD-Integration#step-2-allow-helm-secrets-schemes-in-argocd-cm-configmap
      helm.valuesFileSchemes: http, https, secrets
    rbac:
      policy.csv: |
        # policies
        #p, role:default, applications, get, */*, allow
    params:
      server.insecure: true


appProjects:
  devops:
    clusterResourceWhitelist:
      - group: '*'
        kind: '*'
    description: Devops Applications
    destinations:
      - namespace: '*'
        server: '*'
    orphanedResources:
      warn: true
      ignore:
      - kind: Secret
    sourceRepos:
      - '*'
